#include <heltec_unofficial.h>
#include <LoRaWAN_ESP32.h>
#include <Wire.h>
#include "SSD1306Wire.h"

// Explicitly define the OLED display instance


LoRaWANNode* node;
uint8_t count = 0;

bool isTxConfirmed = true;
uint8_t appData[256];
uint8_t appDataSize = 0;
uint8_t appPort = 2;

void setup() {
    // VextON() removed, ensure external power is enabled another way  // Enable external power for OLED
    delay(100);
    heltec_setup();  // Initialize Heltec board
    heltec_ve(true); // Enable external power for OLED
   
    display.init();
    display.setFont(ArialMT_Plain_10);
    display.clear();
    display.drawString(0, 0, "Starting...");
    display.display();

    Serial.println("Initializing LoRaWAN...");
    int16_t state = radio.begin();
    if (state != RADIOLIB_ERR_NONE) {
        Serial.println("Radio initialization failed!");
        while (true); // Stop execution if radio fails
    }

    node = persist.manage(&radio);

    Serial.println("Joining LoRaWAN network...");
    while (!node->isActivated()) {
        delay(5000); // Retry every 5 seconds until joined
    }

    Serial.println("Successfully joined LoRaWAN network.");
}

void loop() {
    uint8_t uplinkData[1];
    uplinkData[0] = heltec_battery_percent();

    memcpy(appData, uplinkData, sizeof(uplinkData));
    appDataSize = sizeof(uplinkData);
    appPort = 2;  // Set the LoRaWAN port

    uint8_t downlinkData[256];
    size_t lenDown = sizeof(downlinkData);

    Serial.println("Sending confirmed uplink...");
    int16_t state = node->sendReceive(uplinkData, sizeof(uplinkData), 2, downlinkData, &lenDown, true); // Send as confirmed uplink

    int16_t rssi = radio.getRSSI();
    float snr = radio.getSNR();
    int batteryPercent = heltec_battery_percent();

    // Display on OLED
    updateOLED(rssi, snr, batteryPercent);

    if (state == RADIOLIB_ERR_NONE) {
        Serial.println("Message sent, no downlink received.");
    } else if (state > 0) {
        Serial.printf(
            "Message sent, downlink received. RSSI: %d dBm, SNR: %.1f dB, Battery: %d%%\n",
            rssi, snr, batteryPercent
        );
    } else {
        Serial.printf("sendReceive returned error %d, retrying...\n", state);
    }

    delay(15000); // Wait 15 seconds before next transmission
}

// Function to update the OLED display
void updateOLED(int16_t rssi, float snr, int battery) {
    display.clear();  // Clear the display

    display.setTextAlignment(TEXT_ALIGN_LEFT);
    display.setFont(ArialMT_Plain_16);

    display.drawString(0, 0, "RSSI: " + String(rssi) + " dBm");
    display.drawString(0, 16, "SNR: " + String(snr) + " dB");
    display.drawString(0, 32, "Battery: " + String(battery) + "%");

    display.display();  // Refresh the display
}
