#include <heltec_unofficial.h>
#include <LoRaWAN_ESP32.h>

LoRaWANNode* node;
uint8_t count = 0;

bool isTxConfirmed = true;
uint8_t appData[256];
uint8_t appDataSize = 0;
uint8_t appPort = 2;

void setup() {
  heltec_setup();
  
  Serial.println("Initializing LoRaWAN...");
  int16_t state = radio.begin();
  if (state != RADIOLIB_ERR_NONE) {
    Serial.println("Radio initialization failed!");
    while (true); // Stop execution if radio fails
  }

  node = persist.manage(&radio);

  Serial.println("Joining LoRaWAN network...");
  while (!node->isActivated()) {
    delay(5000); // Retry every 5 seconds until joined
  }

  Serial.println("Successfully joined LoRaWAN network.");
}

void loop() {
  uint8_t uplinkData[1];
  uplinkData[0] = heltec_battery_percent();

  memcpy(appData, uplinkData, sizeof(uplinkData));
  appDataSize = sizeof(uplinkData);
  appPort = 2;  // Set the LoRaWAN port

  uint8_t downlinkData[256];
  size_t lenDown = sizeof(downlinkData);

  Serial.println("Sending confirmed uplink...");
  int16_t state = node->sendReceive(uplinkData, sizeof(uplinkData), 2, downlinkData, &lenDown); // Send as confirmed uplink

  if (state == RADIOLIB_ERR_NONE) {
    Serial.println("Message sent, no downlink received.");
  } else if (state > 0) {
    int16_t rssi = radio.getRSSI();
    float snr = radio.getSNR();
    Serial.printf(
      "Message sent, downlink received. RSSI: %d dBm, SNR: %.1f dB, Battery: %d%%, Voltage: %.2fV\n",
      rssi, snr, uplinkData[0], heltec_vbat()
    );
  } else {
    Serial.printf("sendReceive returned error %d, retrying...\n", state);
  }

  delay(15000); // Wait 15 seconds before next transmission
}
